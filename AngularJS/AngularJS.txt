AngularJS
AngularJS 表达式写在双大括号内：{{ expression }}。
AngularJS 表达式把数据绑定到 HTML，这与 ng-bind 指令有异曲同工之妙。
AngularJS 将在表达式书写的位置"输出"数据。
AngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。
实例 {{ 5 + 5 }} 或 {{ firstName + " " + lastName }}

ng-app 指令初始化一个 AngularJS 应用程序。
ng-init 指令初始化应用程序数据。

ng-model 指令把元素值（比如输入域的值）绑定到应用程序。
	<div ng-app="" ng-init="quantity=1;price=5">
	<h2>价格计算器</h2>
	数量： <input type="number"    ng-model="quantity">
	价格： <input type="number" ng-model="price">
	<p><b>总价：</b> {{ quantity * price }}</p>
	</div>
	
ng-repeat 指令会重复一个 HTML 元素：
	<div ng-app="" ng-init="names=['Jani','Hege','Kai']">
	  <p>使用 ng-repeat 来循环数组</p>
	  <ul>
		<li ng-repeat="x in names">
		  {{ x }}
		</li>
	  </ul>
	</div>
	
创建自定义的指令
你可以使用 .directive 函数来添加自定义的指令。
要调用自定义指令，HTML 元素上需要添加自定义指令名。
使用驼峰法来命名一个指令， runoobDirective, 但在使用它时需要以 - 分割, runoob-directive:
restrict 值可以是以下几种:
E 作为元素名使用
A 作为属性使用
C 作为类名使用
M 作为注释使用
	var app = angular.module("myApp", []);
	app.directive("runoobDirective", function() {
		return {
			restrict : "A",
			template : "<h1>自定义指令!</h1>"
		};
	 });

ng-model 
ng-model 指令可以将输入域的值与 AngularJS 创建的变量绑定。
验证用户输入
<form ng-app="" name="myForm">
    Email:
    <input type="email" name="myAddress" ng-model="text">
    <span ng-show="myForm.myAddress.$error.email">不是一个合法的邮箱地址</span>
</form>
以上实例中，提示信息会在 ng-show 属性返回 true 的情况下显示。
指令可以为应用数据提供状态值(invalid, dirty, touched, error):
ng-model 指令基于它们的状态为 HTML 元素提供了 CSS 类：

Scope
	Scope(作用域) 是应用在 HTML (视图) 和 JavaScript (控制器)之间的纽带。
	Scope 是一个对象，有可用的方法和属性。
	Scope 可应用在视图和控制器上
	当你在 AngularJS 创建控制器时，你可以将 $scope 对象当作一个参数传递:
	当在控制器中添加 $scope 对象时，视图 (HTML) 可以获取了这些属性。
	视图中，你不需要添加 $scope 前缀, 只需要添加属性名即可，如： {{carname}}。
	AngularJS 应用组成如下：
	View(视图), 即 HTML。
	Model(模型), 当前视图中可用的数据。
	Controller(控制器), 即 JavaScript 函数，可以添加或修改属性。 
	scope 是模型。
	scope 是一个 JavaScript 对象，带有属性和方法，这些属性和方法可以在视图和控制器中使用。
		<div ng-app="myApp" ng-controller="myCtrl">
		<input ng-model="name">
		<h1>我的名字是 {{name}}</h1>
		</div>
		<script>
		var app = angular.module('myApp', []);
		app.controller('myCtrl', function($scope) {
			$scope.name = "John Dow";
		});
		</script>
	所有的应用都有一个 $rootScope，它可以作用在 ng-app 指令包含的所有 HTML 元素中。
	$rootScope 可作用于整个应用中。是各个 controller 中 scope 的桥梁。用 rootscope 定义的值，可以在各个 controller 中使用。

AngularJS 控制器
	AngularJS 应用程序被控制器控制。
	ng-controller 指令定义了应用程序控制器。
	控制器是 JavaScript 对象，由标准的 JavaScript 对象的构造函数 创建。
		<body>
			<div ng-app="myApp" ng-controller="myCtrl">
				<input type="text" ng-model="name" />
				<p>HELLO {{name}}</p>
				<ul>
					<li ng-repeat="x in names">{{printStr(x.name,x.age)}}</li>
				</ul>
			</div>
		<script>
			var app=angular.module('myApp',[]);
			app.controller('myCtrl',function($scope){
				$scope.name="Danio";
				$scope.names=[
				{name:"Jons",age:21},
				{name:"Tom",age:22},
				{name:"Mike",age:23}
				];
				$scope.printStr=function(name,age){
					return "name:"+name+" "+"age:"+age;
				}
			});
		</script>
		</body>

AngularJS 过滤器 
	AngularJS 过滤器可用于转换数据：
	过滤器可以使用一个管道字符（|）添加到表达式和指令中。
	currency 格式化数字为货币格式。 
	filter 从数组项中选择一个子集。 
	lowercase 格式化字符串为小写。 
	orderBy 根据某个表达式排列数组。 
	uppercase 格式化字符串为大写。 
	<div ng-app="myApp" ng-controller="namesCtrl">
	<p><input type="text" ng-model="test"></p>
	<ul>
	  <li ng-repeat="x in names | filter:test | orderBy:'country'">
		{{ (x.name | uppercase) + ', ' + x.country }}
	  </li>
	</ul>
	</div> 

AngularJS Service
	AngularJS 中，服务是一个函数或对象，可在你的 AngularJS 应用中使用。
	AngularJS 内建了30 多个服务。
	有个 $location 服务，它可以返回当前页面的 URL 地址。
	$http 服务
	$http 是 AngularJS 应用中最常用的服务。 服务向服务器发送请求，应用响应服务器传送过来的数据。
	var app = angular.module('myApp', []);
	app.controller('myCtrl', function($scope, $http) {
		$http.get("welcome.htm").then(function (response) {
			$scope.myWelcome = response.data;
		});
	});
	$timeout 服务
	AngularJS $timeout 服务对应了 JS  window.setTimeout 函数。
	$interval 服务
	AngularJS $interval 服务对应了 JS window.setInterval 函数。



